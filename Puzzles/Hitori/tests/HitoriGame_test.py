import unittest
from unittest import TestCase

from Puzzles.Hitori.HitoriGame import HitoriGame
from Utils.Grid import Grid


class HitoriGameTests(TestCase):
    def test_solution_not_exist_2_black_adjacent(self):
        grid = Grid([
            [1, 1, 1],
            [2, 2, 2],
            [3, 4, 5]
        ])
        game = HitoriGame(grid)
        solution = game.get_solution()
        self.assertEqual(Grid.empty(), solution)

    def test_solution_not_exist_corner_isolated(self):
        grid = Grid([
            [1, 2, 4, 5],
            [3, 6, 3, 3],
            [7, 2, 8, 9],
            [4, 2, 3, 6]
        ])
        game = HitoriGame(grid)
        solution = game.get_solution()
        self.assertEqual(Grid.empty(), solution)

    def test_solution_unique_numbers(self):
        grid = Grid([
            [1, 2, 3],
            [2, 3, 1],
            [3, 1, 2]
        ])
        expected_solution = Grid(grid.matrix.copy())
        game = HitoriGame(grid)

        solution = game.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_simple_duplicate_numbers(self):
        grid = Grid([
            [1, 2, 3],
            [3, 2, 2],
            [2, 3, 1]
        ])
        expected_solution = Grid([
            [1, 2, 3],
            [3, 0, 2],
            [2, 3, 1]
        ])
        game = HitoriGame(grid)
        solution = game.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_12x12(self):
        grid = Grid([
            [6, 6, 5, 6, 11, 5, 3, 9, 6, 8, 3, 4],
            [7, 1, 8, 5, 10, 3, 11, 10, 2, 4, 6, 12],
            [6, 11, 5, 9, 2, 9, 6, 7, 2, 3, 9, 10],
            [10, 6, 2, 7, 10, 4, 3, 8, 12, 2, 9, 1],
            [8, 9, 9, 4, 1, 2, 7, 12, 11, 5, 8, 6],
            [5, 11, 10, 2, 11, 12, 9, 12, 8, 9, 1, 7],
            [8, 12, 11, 12, 3, 12, 10, 6, 1, 2, 12, 8],
            [11, 8, 4, 10, 6, 1, 9, 5, 7, 10, 3, 2],
            [10, 2, 2, 11, 8, 11, 4, 8, 10, 12, 4, 9],
            [3, 9, 1, 9, 5, 8, 12, 2, 5, 10, 4, 11],
            [9, 4, 6, 8, 10, 7, 2, 3, 5, 5, 10, 6],
            [12, 11, 3, 1, 7, 10, 3, 11, 2, 9, 2, 5]
        ])
        expected_solution = Grid([
            [6, 0, 5, 0, 11, 0, 3, 9, 0, 8, 0, 4],
            [7, 1, 8, 5, 10, 3, 11, 0, 2, 4, 6, 12],
            [0, 11, 0, 9, 2, 0, 6, 7, 0, 3, 0, 10],
            [10, 6, 2, 7, 0, 4, 0, 8, 12, 0, 9, 1],
            [8, 9, 0, 4, 1, 2, 7, 12, 11, 5, 0, 6],
            [5, 0, 10, 2, 0, 12, 9, 0, 8, 0, 1, 7],
            [0, 12, 11, 0, 3, 0, 10, 6, 1, 2, 0, 8],
            [11, 8, 4, 10, 6, 1, 0, 5, 7, 0, 3, 2],
            [0, 2, 0, 11, 8, 0, 4, 0, 10, 12, 0, 9],
            [3, 0, 1, 0, 5, 8, 12, 2, 0, 10, 4, 11],
            [9, 4, 6, 8, 0, 7, 2, 3, 5, 0, 10, 0],
            [12, 0, 3, 1, 7, 10, 0, 11, 0, 9, 2, 5]
        ])
        game = HitoriGame(grid)
        solution = game.get_solution()
        self.assertEqual(expected_solution, solution)

        other_solution = game.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_15x15(self):
        grid = Grid([
            [2, 11, 10, 11, 15, 11, 13, 3, 12, 14, 4, 11, 3, 1, 11],
            [8, 6, 8, 5, 8, 11, 10, 14, 8, 13, 12, 9, 1, 8, 2],
            [6, 13, 7, 4, 1, 13, 15, 4, 2, 11, 11, 10, 12, 9, 4],
            [5, 14, 13, 12, 5, 1, 9, 7, 9, 2, 10, 3, 9, 6, 9],
            [11, 4, 5, 14, 12, 4, 14, 2, 13, 7, 9, 7, 15, 7, 10],
            [5, 3, 5, 7, 5, 13, 4, 5, 1, 9, 5, 12, 6, 11, 5],
            [9, 10, 2, 10, 6, 10, 3, 13, 10, 12, 15, 10, 14, 10, 8],
            [14, 12, 1, 3, 5, 15, 7, 6, 8, 5, 1, 4, 11, 13, 11],
            [7, 1, 15, 6, 9, 7, 14, 7, 5, 7, 2, 7, 13, 6, 3],
            [15, 4, 12, 1, 4, 9, 6, 11, 7, 8, 4, 13, 4, 2, 7],
            [12, 2, 14, 4, 13, 2, 8, 4, 15, 4, 11, 7, 2, 3, 1],
            [11, 7, 2, 15, 11, 12, 2, 3, 11, 1, 6, 11, 10, 2, 5],
            [1, 11, 6, 15, 10, 8, 5, 15, 3, 15, 15, 2, 11, 14, 15],
            [4, 9, 11, 2, 14, 4, 12, 1, 11, 5, 8, 15, 9, 10, 13],
            [5, 15, 11, 4, 5, 2, 11, 5, 14, 6, 13, 11, 9, 5, 11]
        ])
        expected_solution = Grid([
            [2, 11, 10, 0, 15, 0, 13, 0, 12, 14, 4, 0, 3, 1, 0],
            [0, 6, 0, 5, 8, 11, 10, 14, 0, 13, 12, 9, 1, 0, 2],
            [6, 13, 7, 0, 1, 0, 15, 0, 2, 11, 0, 10, 12, 9, 4],
            [5, 14, 13, 12, 0, 1, 9, 7, 0, 2, 10, 3, 0, 6, 0],
            [11, 0, 5, 14, 12, 4, 0, 2, 13, 0, 9, 0, 15, 7, 10],
            [0, 3, 0, 7, 0, 13, 4, 0, 1, 9, 5, 12, 6, 11, 0],
            [9, 10, 2, 0, 6, 0, 3, 13, 0, 12, 15, 0, 14, 0, 8],
            [14, 12, 0, 3, 5, 15, 7, 6, 8, 0, 1, 4, 0, 13, 11],
            [0, 1, 15, 6, 9, 0, 14, 0, 5, 7, 2, 0, 13, 0, 3],
            [15, 0, 12, 1, 0, 9, 6, 11, 0, 8, 0, 13, 4, 2, 7],
            [12, 2, 14, 0, 13, 0, 8, 0, 15, 4, 11, 7, 0, 3, 1],
            [0, 7, 0, 15, 11, 12, 2, 3, 0, 1, 6, 0, 10, 0, 5],
            [1, 0, 6, 0, 10, 8, 5, 0, 3, 15, 0, 2, 11, 14, 0],
            [4, 9, 11, 2, 14, 0, 12, 1, 0, 5, 8, 15, 0, 10, 13],
            [0, 15, 0, 4, 0, 2, 11, 0, 14, 6, 13, 0, 9, 5, 0]
        ])
        game = HitoriGame(grid)
        solution = game.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_20x20(self):
        grid = Grid([
            [5, 6, 17, 1, 7, 19, 12, 13, 3, 3, 20, 15, 10, 9, 14, 15, 18, 19, 16, 5],
            [17, 1, 1, 15, 1, 9, 1, 20, 16, 11, 1, 12, 1, 2, 1, 7, 1, 14, 1, 10],
            [20, 17, 14, 20, 19, 7, 16, 7, 3, 5, 18, 9, 4, 20, 1, 13, 8, 9, 6, 5],
            [7, 11, 5, 8, 7, 19, 7, 16, 5, 1, 10, 5, 18, 13, 2, 20, 5, 9, 5, 12],
            [13, 5, 15, 6, 2, 5, 10, 1, 7, 1, 5, 19, 6, 17, 5, 14, 11, 4, 9, 3],
            [17, 8, 17, 4, 10, 17, 18, 11, 12, 16, 12, 17, 9, 19, 15, 3, 13, 12, 7, 17],
            [3, 19, 16, 11, 17, 14, 3, 15, 13, 19, 7, 17, 5, 2, 18, 2, 2, 6, 16, 1],
            [6, 10, 9, 10, 5, 11, 7, 10, 20, 13, 8, 18, 8, 3, 11, 2, 10, 8, 1, 8],
            [19, 4, 10, 2, 19, 1, 19, 14, 5, 15, 3, 5, 17, 10, 6, 5, 12, 18, 19, 7],
            [16, 12, 7, 12, 14, 20, 2, 19, 4, 19, 15, 13, 6, 12, 5, 10, 1, 10, 17, 19],
            [20, 12, 10, 5, 20, 3, 10, 2, 1, 4, 8, 4, 13, 7, 20, 16, 4, 17, 11, 20],
            [18, 4, 8, 20, 12, 4, 6, 4, 4, 7, 20, 5, 3, 20, 11, 20, 14, 13, 20, 17],
            [4, 18, 16, 14, 17, 13, 17, 7, 2, 7, 9, 15, 6, 11, 4, 12, 6, 16, 10, 16],
            [14, 16, 4, 7, 14, 15, 11, 5, 14, 18, 14, 8, 2, 9, 12, 9, 9, 3, 9, 6],
            [1, 5, 4, 10, 8, 2, 14, 2, 18, 5, 13, 12, 12, 16, 4, 11, 19, 5, 3, 5],
            [5, 13, 12, 17, 4, 10, 4, 6, 9, 8, 2, 11, 19, 5, 7, 5, 20, 2, 4, 18],
            [12, 10, 16, 13, 15, 17, 9, 19, 5, 2, 17, 3, 11, 18, 15, 4, 6, 20, 5, 11],
            [2, 15, 13, 6, 11, 8, 4, 6, 12, 14, 6, 10, 7, 6, 20, 15, 16, 15, 19, 15],
            [20, 7, 18, 16, 1, 12, 8, 9, 17, 17, 11, 20, 15, 13, 13, 6, 3, 10, 1, 4],
            [9, 13, 19, 13, 16, 13, 17, 20, 15, 20, 11, 1, 11, 4, 10, 20, 5, 13, 12, 13]
        ])
        expected_solution = Grid([
            [0, 6, 17, 1, 7, 0, 12, 13, 0, 3, 20, 0, 10, 9, 14, 15, 18, 19, 16, 5],
            [17, 1, 0, 15, 0, 9, 0, 20, 16, 11, 0, 12, 0, 2, 0, 7, 0, 14, 0, 10],
            [0, 17, 14, 20, 19, 7, 16, 0, 3, 5, 18, 9, 4, 0, 1, 13, 8, 0, 6, 0],
            [7, 11, 0, 8, 0, 19, 0, 16, 0, 1, 10, 0, 18, 13, 2, 20, 0, 9, 5, 12],
            [13, 0, 15, 6, 2, 0, 10, 1, 7, 0, 5, 19, 0, 17, 0, 14, 11, 4, 9, 3],
            [0, 8, 0, 4, 10, 17, 18, 11, 0, 16, 12, 0, 9, 19, 15, 3, 13, 0, 7, 0],
            [3, 19, 16, 11, 0, 14, 0, 15, 13, 0, 7, 17, 5, 0, 18, 0, 2, 6, 0, 1],
            [6, 0, 9, 0, 5, 11, 7, 0, 20, 13, 0, 18, 0, 3, 0, 2, 10, 0, 1, 8],
            [19, 4, 0, 2, 0, 1, 0, 14, 5, 15, 3, 0, 17, 10, 6, 0, 12, 18, 0, 7],
            [16, 0, 7, 12, 14, 20, 2, 0, 4, 0, 15, 13, 6, 0, 5, 10, 1, 0, 17, 19],
            [0, 12, 10, 5, 0, 3, 0, 2, 1, 4, 8, 0, 13, 7, 0, 16, 0, 17, 11, 20],
            [18, 0, 8, 0, 12, 0, 6, 4, 0, 7, 0, 5, 3, 20, 11, 0, 14, 13, 0, 17],
            [4, 18, 0, 14, 17, 13, 0, 7, 2, 0, 9, 15, 0, 11, 0, 12, 6, 0, 10, 16],
            [0, 16, 4, 7, 0, 15, 11, 5, 0, 18, 14, 8, 2, 0, 12, 0, 9, 3, 0, 6],
            [1, 5, 0, 10, 8, 2, 14, 0, 18, 0, 13, 0, 12, 16, 4, 11, 19, 0, 3, 0],
            [0, 13, 12, 17, 0, 10, 0, 6, 9, 8, 0, 11, 19, 0, 7, 5, 20, 2, 4, 18],
            [12, 10, 0, 13, 15, 0, 9, 19, 0, 2, 17, 3, 0, 18, 0, 4, 0, 20, 0, 11],
            [2, 0, 13, 0, 11, 8, 4, 0, 12, 14, 0, 10, 7, 6, 20, 0, 16, 0, 19, 15],
            [20, 7, 18, 16, 1, 12, 8, 9, 0, 17, 11, 0, 15, 0, 13, 6, 3, 10, 0, 4],
            [9, 0, 19, 0, 16, 0, 17, 0, 15, 20, 0, 1, 11, 4, 10, 0, 5, 0, 12, 13]
        ])
        game = HitoriGame(grid)
        solution = game.get_solution()
        self.assertEqual(expected_solution, solution)

        other_solution = game.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)


if __name__ == '__main__':
    unittest.main()
