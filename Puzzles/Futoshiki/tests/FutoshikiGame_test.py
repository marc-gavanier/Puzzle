import unittest
from unittest import TestCase

from Puzzles.Futoshiki.FutoshikiGame import FutoshikiGame
from Utils.Grid import Grid


class FutoshikiGameTests(TestCase):
    def test_grid_must_be_square_raises_value_error(self):
        grid = Grid([
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
        ])
        higher_positions = [((0, 0), (0, 1))]
        with self.assertRaises(ValueError) as context:
            FutoshikiGame((grid, higher_positions))
        self.assertEqual(str(context.exception), "The grid must be square")

    def test_solution_grid_too_small(self):
        grid = Grid([
            [-1, -1, -1],
            [-1, -1, 0],
            [1, -1, -1],
        ])
        higher_positions = [((0, 0), (0, 1))]
        with self.assertRaises(ValueError) as context:
            FutoshikiGame((grid, higher_positions))
        self.assertEqual("The grid must be at least 4x4", str(context.exception))

    def test_solution_4x4(self):
        grid = Grid([
            [-1, -1, +3, -1],
            [-1, -1, -1, -1],
            [-1, -1, -1, -1],
            [-1, -1, -1, -1],
        ])
        higher_positions = [((0, 3), (1, 3)), ((1, 1), (1, 2)), ((1, 3), (2, 3)), ((2, 0), (3, 0)), ((3, 1), (3, 2))]
        expected_grid = Grid([
            [2, 1, 3, 4],
            [4, 3, 1, 2],
            [3, 2, 4, 1],
            [1, 4, 2, 3],
        ])
        game = FutoshikiGame((grid, higher_positions))
        solution = game.get_solution()
        self.assertEqual(expected_grid, solution)
        other_solution = game.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_5x5(self):
        grid = Grid([[-1, -1, -1, -1, -1], [-1, 4, -1, -1, -1], [-1, -1, 4, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]])
        higher_positions = [((0, 0), (0, 1)), ((0, 3), (0, 2)), ((0, 3), (1, 3)), ((0, 4), (0, 3)), ((2, 0), (2, 1)), ((2, 2), (1, 2)), ((2, 2), (3, 2)), ((2, 4), (1, 4)), ((3, 2), (3, 3)), ((4, 3), (4, 4))]
        expected_grid = Grid([
            [4, 2, 1, 3, 5],
            [5, 4, 3, 2, 1],
            [2, 1, 4, 5, 3],
            [3, 5, 2, 1, 4],
            [1, 3, 5, 4, 2],
        ])
        game = FutoshikiGame((grid, higher_positions))
        solution = game.get_solution()
        self.assertEqual(expected_grid, solution)
        other_solution = game.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_7x7(self):
        grid = Grid([[-1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1], [6, 2, -1, -1, -1, -1, -1]])
        higher_positions = [((0, 0), (1, 0)), ((0, 1), (0, 0)), ((0, 4), (0, 5)), ((0, 5), (0, 6)), ((1, 1), (1, 0)), ((1, 4), (1, 5)), ((1, 5), (1, 6)), ((2, 0), (2, 1)), ((2, 1), (1, 1)), ((2, 3), (1, 3)), ((2, 4), (2, 5)), ((2, 6), (3, 6)), ((3, 1), (3, 0)),
                            ((3, 2), (2, 2)), ((3, 3), (3, 2)), ((3, 4), (3, 3)), ((3, 6), (3, 5)), ((4, 2), (4, 3)), ((4, 3), (3, 3)), ((5, 1), (6, 1)), ((5, 2), (5, 1)), ((5, 4), (5, 5)), ((6, 0), (5, 0)), ((6, 3), (6, 2)), ((6, 3), (5, 3)), ((6, 6), (5, 6))]
        expected_grid = Grid([
            [2, 6, 5, 7, 4, 3, 1],
            [1, 3, 4, 2, 7, 6, 5],
            [5, 4, 1, 6, 3, 2, 7],
            [4, 7, 2, 3, 5, 1, 6],
            [7, 1, 6, 4, 2, 5, 3],
            [3, 5, 7, 1, 6, 4, 2],
            [6, 2, 3, 5, 1, 7, 4],
        ])
        game = FutoshikiGame((grid, higher_positions))
        solution = game.get_solution()
        self.assertEqual(expected_grid, solution)
        other_solution = game.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_9x9(self):
        grid = Grid(
            [[-1, 7, -1, -1, -1, 5, 3, 2, -1], [-1, -1, -1, -1, -1, -1, 7, -1, 2], [-1, -1, -1, -1, -1, -1, -1, -1, 5], [-1, -1, 3, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 4, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 8, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1],
             [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 7, 2, -1, 5, 8]])
        higher_positions = [((0, 2), (0, 3)), ((0, 3), (1, 3)), ((0, 8), (1, 8)), ((1, 0), (1, 1)), ((1, 4), (0, 4)), ((1, 7), (1, 6)), ((2, 1), (2, 0)), ((2, 2), (3, 2)), ((2, 3), (2, 4)), ((2, 5), (2, 4)), ((2, 6), (3, 6)), ((3, 1), (2, 1)), ((3, 3), (3, 2)),
                            ((3, 5), (3, 6)), ((3, 6), (4, 6)), ((3, 7), (3, 6)), ((4, 2), (4, 1)), ((4, 7), (3, 7)), ((5, 0), (5, 1)), ((5, 2), (4, 2)), ((5, 5), (5, 4)), ((5, 7), (5, 6)), ((6, 7), (6, 8)), ((7, 4), (7, 3)), ((7, 4), (6, 4)), ((7, 5), (7, 4)),
                            ((7, 7), (8, 7)), ((8, 3), (8, 4)), ((8, 5), (8, 6))]
        expected_grid = Grid([
            [1, 7, 9, 6, 8, 5, 3, 2, 4],
            [6, 3, 5, 4, 9, 1, 7, 8, 2],
            [2, 6, 8, 7, 3, 4, 9, 1, 5],
            [4, 8, 3, 5, 2, 9, 6, 7, 1],
            [7, 1, 2, 8, 4, 3, 5, 9, 6],
            [9, 5, 4, 1, 6, 8, 2, 3, 7],
            [5, 9, 7, 2, 1, 6, 8, 4, 3],
            [8, 2, 1, 3, 5, 7, 4, 6, 9],
            [3, 4, 6, 9, 7, 2, 1, 5, 8],
        ])
        game = FutoshikiGame((grid, higher_positions))
        solution = game.get_solution()
        self.assertEqual(expected_grid, solution)
        other_solution = game.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_11x11(self):
        grid = Grid([[7, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11], [-1, -1, 5, -1, -1, -1, 11, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1],
                     [-1, -1, -1, -1, 5, -1, -1, 9, -1, -1, 3], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1], [-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1],
                     [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7]])
        higher_positions = [((0, 4), (1, 4)), ((0, 5), (1, 5)), ((0, 6), (0, 7)), ((0, 7), (0, 8)), ((0, 7), (1, 7)), ((0, 9), (1, 9)), ((1, 0), (1, 1)), ((1, 3), (0, 3)), ((1, 6), (0, 6)), ((1, 7), (2, 7)), ((1, 9), (2, 9)), ((2, 0), (3, 0)), ((2, 2), (2, 1)),
                            ((2, 2), (1, 2)), ((2, 4), (3, 4)), ((2, 9), (2, 8)), ((3, 3), (3, 2)), ((3, 4), (3, 5)), ((3, 5), (4, 5)), ((3, 6), (3, 7)), ((3, 9), (3, 10)), ((4, 1), (5, 1)), ((4, 2), (4, 1)), ((4, 3), (3, 3)), ((4, 3), (5, 3)), ((4, 6), (5, 6)),
                            ((5, 3), (5, 4)), ((5, 4), (6, 4)), ((5, 7), (5, 8)), ((5, 8), (4, 8)), ((5, 9), (5, 10)), ((6, 0), (5, 0)), ((6, 1), (7, 1)), ((6, 3), (6, 2)), ((6, 4), (6, 3)), ((6, 6), (5, 6)), ((6, 8), (6, 9)), ((6, 9), (6, 10)), ((6, 10), (5, 10)),
                            ((7, 0), (6, 0)), ((7, 1), (7, 0)), ((7, 2), (8, 2)), ((7, 6), (8, 6)), ((7, 7), (7, 8)), ((7, 7), (6, 7)), ((7, 9), (7, 8)), ((7, 10), (8, 10)), ((8, 4), (9, 4)), ((8, 6), (8, 5)), ((8, 7), (7, 7)), ((8, 9), (7, 9)), ((8, 10), (8, 9)),
                            ((9, 0), (8, 0)), ((9, 1), (9, 0)), ((9, 2), (10, 2)), ((9, 3), (8, 3)), ((9, 3), (10, 3)), ((9, 4), (9, 3)), ((9, 7), (10, 7)), ((9, 9), (8, 9)), ((9, 10), (10, 10)), ((10, 0), (9, 0)), ((10, 1), (10, 0))]
        expected_grid = Grid([
            [7, 4, 10, 1, 8, 9, 6, 5, 3, 11, 2],
            [10, 1, 4, 8, 3, 5, 7, 2, 6, 9, 11],
            [9, 3, 5, 2, 10, 7, 11, 1, 4, 8, 6],
            [8, 10, 7, 9, 6, 4, 5, 3, 11, 2, 1],
            [11, 6, 8, 10, 2, 3, 9, 7, 5, 1, 4],
            [1, 2, 11, 7, 5, 10, 4, 9, 8, 6, 3],
            [2, 8, 1, 3, 4, 11, 10, 6, 9, 7, 5],
            [5, 7, 9, 11, 1, 6, 3, 8, 2, 4, 10],
            [3, 11, 6, 4, 9, 1, 2, 10, 7, 5, 8],
            [4, 5, 3, 6, 7, 2, 8, 11, 1, 10, 9],
            [6, 9, 2, 5, 11, 8, 1, 4, 10, 3, 7],
        ])
        game = FutoshikiGame((grid, higher_positions))
        solution = game.get_solution()
        self.assertEqual(expected_grid, solution)
        other_solution = game.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_13x13(self):
        grid = Grid([
            [-1, -1, 4, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, 2, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 12, -1, -1, -1, -1, 1, -1, 14, -1, 8, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, 13, -1, -1, -1, -1, 7, -1, 4, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 15, 3, -1, -1, -1, -1, -1, -1], [-1, -1, 12, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1], [-1, 11, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1], [7, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1], [-1, -1, -1, 11, 4, 3, 13, -1, -1, 9, 2, -1, -1, 10, 15]
        ])
        higher_positions = [
            ((0, 3), (0, 4)), ((0, 8), (0, 7)), ((0, 9), (0, 10)), ((0, 10), (0, 11)), ((1, 0), (1, 1)), ((1, 1), (2, 1)), ((1, 2), (1, 1)), ((1, 3), (0, 3)), ((1, 4), (2, 4)), ((1, 5), (1, 4)), ((1, 5), (0, 5)), ((1, 7), (1, 8)), ((1, 8), (0, 8)),
            ((1, 9), (1, 8)), ((1, 10), (1, 11)), ((1, 12), (1, 11)), ((1, 13), (1, 14)), ((1, 14), (2, 14)), ((2, 0), (2, 1)), ((2, 2), (2, 1)), ((2, 3), (2, 4)), ((2, 5), (2, 4)), ((2, 8), (1, 8)), ((2, 9), (1, 9)), ((2, 9), (3, 9)),
            ((2, 10), (3, 10)), ((2, 12), (2, 13)), ((2, 13), (1, 13)), ((2, 14), (3, 14)), ((3, 3), (3, 2)), ((3, 4), (3, 3)), ((3, 4), (4, 4)), ((3, 9), (4, 9)), ((3, 11), (3, 12)), ((3, 12), (4, 12)), ((4, 0), (5, 0)), ((4, 1), (3, 1)),
            ((4, 3), (4, 2)), ((4, 4), (4, 3)), ((4, 9), (4, 10)), ((4, 11), (5, 11)), ((4, 13), (4, 12)), ((4, 14), (5, 14)), ((5, 0), (5, 1)), ((5, 2), (6, 2)), ((5, 4), (5, 5)), ((5, 5), (5, 6)), ((5, 7), (4, 7)), ((5, 8), (5, 7)), ((5, 9), (6, 9)),
            ((5, 10), (6, 10)), ((5, 11), (5, 12)), ((5, 14), (5, 13)), ((6, 1), (7, 1)), ((6, 2), (6, 3)), ((6, 3), (7, 3)), ((6, 4), (6, 3)), ((6, 6), (6, 5)), ((6, 9), (6, 8)), ((6, 10), (6, 9)), ((6, 12), (6, 13)), ((6, 13), (7, 13)),
            ((7, 1), (8, 1)), ((7, 4), (8, 4)), ((7, 5), (7, 4)), ((7, 6), (7, 5)), ((7, 11), (7, 12)), ((8, 0), (7, 0)), ((8, 2), (8, 1)), ((8, 3), (8, 2)), ((8, 4), (8, 3)), ((8, 7), (7, 7)), ((8, 8), (7, 8)), ((8, 10), (7, 10)), ((8, 11), (8, 12)),
            ((8, 12), (7, 12)), ((8, 13), (7, 13)), ((8, 14), (8, 13)), ((9, 1), (9, 2)), ((9, 1), (8, 1)), ((9, 3), (8, 3)), ((9, 6), (9, 5)), ((9, 7), (10, 7)), ((9, 8), (9, 7)), ((9, 9), (9, 8)), ((9, 10), (10, 10)), ((9, 12), (8, 12)),
            ((9, 13), (9, 12)), ((10, 1), (9, 1)), ((10, 3), (9, 3)), ((10, 5), (11, 5)), ((10, 6), (9, 6)), ((10, 8), (10, 7)), ((10, 9), (11, 9)), ((10, 10), (10, 9)), ((10, 11), (10, 12)), ((11, 0), (10, 0)), ((11, 2), (11, 1)), ((11, 6), (11, 5)),
            ((11, 11), (10, 11)), ((11, 12), (12, 12)), ((11, 13), (11, 12)), ((11, 14), (11, 13)), ((12, 0), (11, 0)), ((12, 2), (12, 1)), ((12, 4), (12, 3)), ((12, 9), (12, 10)), ((12, 10), (13, 10)), ((12, 14), (13, 14)), ((13, 0), (12, 0)),
            ((13, 3), (12, 3)), ((13, 4), (13, 3)), ((13, 5), (14, 5)), ((13, 6), (13, 7)), ((13, 7), (14, 7)), ((13, 8), (13, 7)), ((13, 10), (14, 10)), ((13, 12), (13, 13)), ((13, 13), (12, 13)), ((13, 14), (13, 13)), ((14, 2), (14, 3)),
            ((14, 3), (13, 3)), ((14, 8), (14, 7)), ((14, 9), (14, 8)), ((14, 11), (14, 12))
        ]
        expected_grid = Grid([
            [7, 4, 10, 1, 8, 9, 6, 5, 3, 11, 2],
            [10, 1, 4, 8, 3, 5, 7, 2, 6, 9, 11],
            [9, 3, 5, 2, 10, 7, 11, 1, 4, 8, 6],
            [8, 10, 7, 9, 6, 4, 5, 3, 11, 2, 1],
            [11, 6, 8, 10, 2, 3, 9, 7, 5, 1, 4],
            [1, 2, 11, 7, 5, 10, 4, 9, 8, 6, 3],
            [2, 8, 1, 3, 4, 11, 10, 6, 9, 7, 5],
            [5, 7, 9, 11, 1, 6, 3, 8, 2, 4, 10],
            [3, 11, 6, 4, 9, 1, 2, 10, 7, 5, 8],
            [4, 5, 3, 6, 7, 2, 8, 11, 1, 10, 9],
            [6, 9, 2, 5, 11, 8, 1, 4, 10, 3, 7],
        ])
        game = FutoshikiGame((grid, higher_positions))
        solution = game.get_solution()
        self.assertEqual(expected_grid, solution)
        other_solution = game.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)


if __name__ == '__main__':
    unittest.main()
