import unittest
from unittest import TestCase

from Domain.Board.Grid import Grid
from Hitori.HitoriSolver import HitoriSolver
from SolverEngineAdapters.Z3SolverEngine import Z3SolverEngine


class HitoriSolverTests(TestCase):
    @staticmethod
    def get_solver_engine():
        return Z3SolverEngine()

    def test_solution_not_exist_2_black_adjacent(self):
        grid = Grid([
            [1, 1, 1],
            [2, 2, 2],
            [3, 4, 5]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())

        solution = game_solver.get_solution()
        self.assertEqual(Grid.empty(), solution)

    def test_solution_not_exist_corner_isolated(self):
        grid = Grid([
            [1, 2, 4, 5],
            [3, 6, 3, 3],
            [7, 2, 8, 9],
            [4, 2, 3, 6]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())

        solution = game_solver.get_solution()
        self.assertEqual(Grid.empty(), solution)

    def test_solution_unique_numbers(self):
        grid = Grid([
            [1, 2, 3],
            [2, 3, 1],
            [3, 1, 2]
        ])
        expected_solution = Grid(grid.matrix.copy())
        game_solver = HitoriSolver(grid, self.get_solver_engine())


        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_simple_duplicate_numbers(self):
        grid = Grid([
            [1, 2, 3],
            [3, 2, 2],
            [2, 3, 1]
        ])
        expected_solution = Grid([
            [1, 2, 3],
            [3, 0, 2],
            [2, 3, 1]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_5x5(self):
        grid = Grid([
            [1, 1, 3, 3, 5],
            [4, 3, 5, 2, 1],
            [2, 3, 4, 1, 5],
            [2, 1, 4, 4, 3],
            [5, 2, 1, 3, 2]
        ])
        expected_solution = Grid([
            [1, 0, 3, 0, 5],
            [4, 3, 5, 2, 1],
            [2, 0, 4, 1, 0],
            [0, 1, 0, 4, 3],
            [5, 2, 1, 3, 0]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

        other_solution = game_solver.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_12x12(self):  # approx 1.5s
        grid = Grid([
            [6, 6, 5, 6, 11, 5, 3, 9, 6, 8, 3, 4],
            [7, 1, 8, 5, 10, 3, 11, 10, 2, 4, 6, 12],
            [6, 11, 5, 9, 2, 9, 6, 7, 2, 3, 9, 10],
            [10, 6, 2, 7, 10, 4, 3, 8, 12, 2, 9, 1],
            [8, 9, 9, 4, 1, 2, 7, 12, 11, 5, 8, 6],
            [5, 11, 10, 2, 11, 12, 9, 12, 8, 9, 1, 7],
            [8, 12, 11, 12, 3, 12, 10, 6, 1, 2, 12, 8],
            [11, 8, 4, 10, 6, 1, 9, 5, 7, 10, 3, 2],
            [10, 2, 2, 11, 8, 11, 4, 8, 10, 12, 4, 9],
            [3, 9, 1, 9, 5, 8, 12, 2, 5, 10, 4, 11],
            [9, 4, 6, 8, 10, 7, 2, 3, 5, 5, 10, 6],
            [12, 11, 3, 1, 7, 10, 3, 11, 2, 9, 2, 5]
        ])
        expected_solution = Grid([
            [6, 0, 5, 0, 11, 0, 3, 9, 0, 8, 0, 4],
            [7, 1, 8, 5, 10, 3, 11, 0, 2, 4, 6, 12],
            [0, 11, 0, 9, 2, 0, 6, 7, 0, 3, 0, 10],
            [10, 6, 2, 7, 0, 4, 0, 8, 12, 0, 9, 1],
            [8, 9, 0, 4, 1, 2, 7, 12, 11, 5, 0, 6],
            [5, 0, 10, 2, 0, 12, 9, 0, 8, 0, 1, 7],
            [0, 12, 11, 0, 3, 0, 10, 6, 1, 2, 0, 8],
            [11, 8, 4, 10, 6, 1, 0, 5, 7, 0, 3, 2],
            [0, 2, 0, 11, 8, 0, 4, 0, 10, 12, 0, 9],
            [3, 0, 1, 0, 5, 8, 12, 2, 0, 10, 4, 11],
            [9, 4, 6, 8, 0, 7, 2, 3, 5, 0, 10, 0],
            [12, 0, 3, 1, 7, 10, 0, 11, 0, 9, 2, 5]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

        other_solution = game_solver.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_15x15(self):  # approx 3s
        grid = Grid([
            [2, 11, 10, 11, 15, 11, 13, 3, 12, 14, 4, 11, 3, 1, 11],
            [8, 6, 8, 5, 8, 11, 10, 14, 8, 13, 12, 9, 1, 8, 2],
            [6, 13, 7, 4, 1, 13, 15, 4, 2, 11, 11, 10, 12, 9, 4],
            [5, 14, 13, 12, 5, 1, 9, 7, 9, 2, 10, 3, 9, 6, 9],
            [11, 4, 5, 14, 12, 4, 14, 2, 13, 7, 9, 7, 15, 7, 10],
            [5, 3, 5, 7, 5, 13, 4, 5, 1, 9, 5, 12, 6, 11, 5],
            [9, 10, 2, 10, 6, 10, 3, 13, 10, 12, 15, 10, 14, 10, 8],
            [14, 12, 1, 3, 5, 15, 7, 6, 8, 5, 1, 4, 11, 13, 11],
            [7, 1, 15, 6, 9, 7, 14, 7, 5, 7, 2, 7, 13, 6, 3],
            [15, 4, 12, 1, 4, 9, 6, 11, 7, 8, 4, 13, 4, 2, 7],
            [12, 2, 14, 4, 13, 2, 8, 4, 15, 4, 11, 7, 2, 3, 1],
            [11, 7, 2, 15, 11, 12, 2, 3, 11, 1, 6, 11, 10, 2, 5],
            [1, 11, 6, 15, 10, 8, 5, 15, 3, 15, 15, 2, 11, 14, 15],
            [4, 9, 11, 2, 14, 4, 12, 1, 11, 5, 8, 15, 9, 10, 13],
            [5, 15, 11, 4, 5, 2, 11, 5, 14, 6, 13, 11, 9, 5, 11]
        ])
        expected_solution = Grid([
            [2, 11, 10, 0, 15, 0, 13, 0, 12, 14, 4, 0, 3, 1, 0],
            [0, 6, 0, 5, 8, 11, 10, 14, 0, 13, 12, 9, 1, 0, 2],
            [6, 13, 7, 0, 1, 0, 15, 0, 2, 11, 0, 10, 12, 9, 4],
            [5, 14, 13, 12, 0, 1, 9, 7, 0, 2, 10, 3, 0, 6, 0],
            [11, 0, 5, 14, 12, 4, 0, 2, 13, 0, 9, 0, 15, 7, 10],
            [0, 3, 0, 7, 0, 13, 4, 0, 1, 9, 5, 12, 6, 11, 0],
            [9, 10, 2, 0, 6, 0, 3, 13, 0, 12, 15, 0, 14, 0, 8],
            [14, 12, 0, 3, 5, 15, 7, 6, 8, 0, 1, 4, 0, 13, 11],
            [0, 1, 15, 6, 9, 0, 14, 0, 5, 7, 2, 0, 13, 0, 3],
            [15, 0, 12, 1, 0, 9, 6, 11, 0, 8, 0, 13, 4, 2, 7],
            [12, 2, 14, 0, 13, 0, 8, 0, 15, 4, 11, 7, 0, 3, 1],
            [0, 7, 0, 15, 11, 12, 2, 3, 0, 1, 6, 0, 10, 0, 5],
            [1, 0, 6, 0, 10, 8, 5, 0, 3, 15, 0, 2, 11, 14, 0],
            [4, 9, 11, 2, 14, 0, 12, 1, 0, 5, 8, 15, 0, 10, 13],
            [0, 15, 0, 4, 0, 2, 11, 0, 14, 6, 13, 0, 9, 5, 0]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_20x20_0(self):  # approx 10s
        grid = Grid([
            [5, 6, 17, 1, 7, 19, 12, 13, 3, 3, 20, 15, 10, 9, 14, 15, 18, 19, 16, 5],
            [17, 1, 1, 15, 1, 9, 1, 20, 16, 11, 1, 12, 1, 2, 1, 7, 1, 14, 1, 10],
            [20, 17, 14, 20, 19, 7, 16, 7, 3, 5, 18, 9, 4, 20, 1, 13, 8, 9, 6, 5],
            [7, 11, 5, 8, 7, 19, 7, 16, 5, 1, 10, 5, 18, 13, 2, 20, 5, 9, 5, 12],
            [13, 5, 15, 6, 2, 5, 10, 1, 7, 1, 5, 19, 6, 17, 5, 14, 11, 4, 9, 3],
            [17, 8, 17, 4, 10, 17, 18, 11, 12, 16, 12, 17, 9, 19, 15, 3, 13, 12, 7, 17],
            [3, 19, 16, 11, 17, 14, 3, 15, 13, 19, 7, 17, 5, 2, 18, 2, 2, 6, 16, 1],
            [6, 10, 9, 10, 5, 11, 7, 10, 20, 13, 8, 18, 8, 3, 11, 2, 10, 8, 1, 8],
            [19, 4, 10, 2, 19, 1, 19, 14, 5, 15, 3, 5, 17, 10, 6, 5, 12, 18, 19, 7],
            [16, 12, 7, 12, 14, 20, 2, 19, 4, 19, 15, 13, 6, 12, 5, 10, 1, 10, 17, 19],
            [20, 12, 10, 5, 20, 3, 10, 2, 1, 4, 8, 4, 13, 7, 20, 16, 4, 17, 11, 20],
            [18, 4, 8, 20, 12, 4, 6, 4, 4, 7, 20, 5, 3, 20, 11, 20, 14, 13, 20, 17],
            [4, 18, 16, 14, 17, 13, 17, 7, 2, 7, 9, 15, 6, 11, 4, 12, 6, 16, 10, 16],
            [14, 16, 4, 7, 14, 15, 11, 5, 14, 18, 14, 8, 2, 9, 12, 9, 9, 3, 9, 6],
            [1, 5, 4, 10, 8, 2, 14, 2, 18, 5, 13, 12, 12, 16, 4, 11, 19, 5, 3, 5],
            [5, 13, 12, 17, 4, 10, 4, 6, 9, 8, 2, 11, 19, 5, 7, 5, 20, 2, 4, 18],
            [12, 10, 16, 13, 15, 17, 9, 19, 5, 2, 17, 3, 11, 18, 15, 4, 6, 20, 5, 11],
            [2, 15, 13, 6, 11, 8, 4, 6, 12, 14, 6, 10, 7, 6, 20, 15, 16, 15, 19, 15],
            [20, 7, 18, 16, 1, 12, 8, 9, 17, 17, 11, 20, 15, 13, 13, 6, 3, 10, 1, 4],
            [9, 13, 19, 13, 16, 13, 17, 20, 15, 20, 11, 1, 11, 4, 10, 20, 5, 13, 12, 13]
        ])
        expected_solution = Grid([
            [0, 6, 17, 1, 7, 0, 12, 13, 0, 3, 20, 0, 10, 9, 14, 15, 18, 19, 16, 5],
            [17, 1, 0, 15, 0, 9, 0, 20, 16, 11, 0, 12, 0, 2, 0, 7, 0, 14, 0, 10],
            [0, 17, 14, 20, 19, 7, 16, 0, 3, 5, 18, 9, 4, 0, 1, 13, 8, 0, 6, 0],
            [7, 11, 0, 8, 0, 19, 0, 16, 0, 1, 10, 0, 18, 13, 2, 20, 0, 9, 5, 12],
            [13, 0, 15, 6, 2, 0, 10, 1, 7, 0, 5, 19, 0, 17, 0, 14, 11, 4, 9, 3],
            [0, 8, 0, 4, 10, 17, 18, 11, 0, 16, 12, 0, 9, 19, 15, 3, 13, 0, 7, 0],
            [3, 19, 16, 11, 0, 14, 0, 15, 13, 0, 7, 17, 5, 0, 18, 0, 2, 6, 0, 1],
            [6, 0, 9, 0, 5, 11, 7, 0, 20, 13, 0, 18, 0, 3, 0, 2, 10, 0, 1, 8],
            [19, 4, 0, 2, 0, 1, 0, 14, 5, 15, 3, 0, 17, 10, 6, 0, 12, 18, 0, 7],
            [16, 0, 7, 12, 14, 20, 2, 0, 4, 0, 15, 13, 6, 0, 5, 10, 1, 0, 17, 19],
            [0, 12, 10, 5, 0, 3, 0, 2, 1, 4, 8, 0, 13, 7, 0, 16, 0, 17, 11, 20],
            [18, 0, 8, 0, 12, 0, 6, 4, 0, 7, 0, 5, 3, 20, 11, 0, 14, 13, 0, 17],
            [4, 18, 0, 14, 17, 13, 0, 7, 2, 0, 9, 15, 0, 11, 0, 12, 6, 0, 10, 16],
            [0, 16, 4, 7, 0, 15, 11, 5, 0, 18, 14, 8, 2, 0, 12, 0, 9, 3, 0, 6],
            [1, 5, 0, 10, 8, 2, 14, 0, 18, 0, 13, 0, 12, 16, 4, 11, 19, 0, 3, 0],
            [0, 13, 12, 17, 0, 10, 0, 6, 9, 8, 0, 11, 19, 0, 7, 5, 20, 2, 4, 18],
            [12, 10, 0, 13, 15, 0, 9, 19, 0, 2, 17, 3, 0, 18, 0, 4, 0, 20, 0, 11],
            [2, 0, 13, 0, 11, 8, 4, 0, 12, 14, 0, 10, 7, 6, 20, 0, 16, 0, 19, 15],
            [20, 7, 18, 16, 1, 12, 8, 9, 0, 17, 11, 0, 15, 0, 13, 6, 3, 10, 0, 4],
            [9, 0, 19, 0, 16, 0, 17, 0, 15, 20, 0, 1, 11, 4, 10, 0, 5, 0, 12, 13]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

        other_solution = game_solver.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_20x20_1(self):  # approx 13s
        grid = Grid([
            [19, 4, 11, 2, 9, 14, 19, 1, 19, 2, 8, 17, 12, 17, 10, 19, 13, 19, 6, 2],
            [6, 7, 4, 17, 11, 18, 1, 11, 13, 12, 11, 20, 13, 10, 11, 5, 8, 2, 4, 3],
            [17, 3, 19, 17, 10, 2, 17, 13, 18, 2, 14, 6, 4, 17, 9, 18, 16, 18, 1, 2],
            [13, 18, 8, 14, 1, 7, 11, 18, 4, 10, 5, 1, 6, 1, 16, 15, 10, 12, 9, 20],
            [8, 19, 8, 15, 5, 6, 8, 7, 8, 4, 8, 18, 8, 13, 8, 9, 17, 8, 16, 8],
            [7, 8, 4, 6, 13, 16, 15, 16, 17, 6, 19, 16, 20, 16, 2, 8, 5, 14, 3, 6],
            [10, 12, 15, 8, 11, 16, 11, 5, 1, 9, 11, 4, 18, 6, 19, 3, 10, 13, 10, 7],
            [15, 2, 1, 5, 17, 1, 19, 16, 1, 7, 12, 8, 1, 14, 3, 20, 18, 1, 11, 1],
            [2, 1, 3, 16, 3, 4, 5, 18, 10, 3, 9, 2, 15, 8, 2, 6, 18, 19, 18, 11],
            [16, 17, 1, 9, 3, 8, 4, 6, 12, 14, 9, 2, 9, 17, 5, 4, 11, 10, 19, 4],
            [14, 11, 3, 12, 8, 19, 16, 20, 9, 6, 2, 16, 1, 3, 19, 19, 7, 7, 4, 17],
            [10, 20, 5, 6, 4, 13, 12, 2, 20, 1, 4, 9, 3, 4, 15, 11, 19, 12, 8, 12],
            [12, 5, 2, 12, 4, 1, 20, 12, 3, 17, 6, 16, 19, 15, 12, 14, 7, 18, 13, 16],
            [14, 9, 16, 1, 18, 16, 3, 8, 14, 15, 14, 19, 16, 14, 7, 16, 4, 6, 14, 10],
            [19, 17, 17, 13, 11, 3, 12, 12, 8, 17, 10, 16, 2, 4, 6, 16, 20, 5, 20, 6],
            [13, 6, 7, 19, 12, 19, 4, 14, 16, 8, 3, 14, 5, 2, 3, 17, 1, 13, 15, 13],
            [3, 17, 6, 19, 6, 9, 2, 4, 9, 16, 6, 15, 17, 20, 13, 2, 9, 1, 17, 8],
            [6, 13, 18, 19, 20, 15, 10, 6, 2, 6, 1, 6, 8, 19, 17, 4, 3, 6, 5, 19],
            [9, 16, 13, 4, 2, 5, 6, 3, 20, 19, 17, 1, 7, 12, 8, 7, 20, 11, 5, 18],
            [12, 10, 12, 3, 12, 11, 12, 20, 14, 12, 15, 20, 17, 20, 1, 13, 6, 20, 18, 12]
        ])
        expected_solution = Grid([
            [0, 4, 11, 2, 9, 14, 0, 1, 19, 0, 8, 17, 12, 0, 10, 0, 13, 0, 6, 0],
            [6, 7, 0, 17, 0, 18, 1, 0, 13, 12, 0, 20, 0, 10, 11, 5, 8, 2, 4, 3],
            [0, 3, 19, 0, 10, 2, 17, 13, 18, 0, 14, 6, 4, 0, 9, 0, 16, 0, 1, 0],
            [13, 18, 8, 14, 0, 7, 11, 0, 4, 10, 5, 0, 6, 1, 16, 15, 0, 12, 9, 20],
            [0, 19, 0, 15, 5, 6, 8, 7, 0, 4, 0, 18, 0, 13, 0, 9, 17, 0, 16, 0],
            [7, 8, 4, 0, 13, 0, 15, 0, 17, 0, 19, 16, 20, 0, 2, 0, 5, 14, 3, 6],
            [0, 12, 15, 8, 11, 16, 0, 5, 1, 9, 0, 4, 18, 6, 19, 3, 10, 13, 0, 7],
            [15, 2, 0, 5, 17, 0, 19, 16, 0, 7, 12, 8, 0, 14, 3, 20, 18, 0, 11, 1],
            [2, 1, 3, 16, 0, 4, 5, 18, 10, 0, 9, 0, 15, 8, 0, 6, 0, 19, 0, 11],
            [16, 0, 1, 0, 3, 8, 0, 6, 12, 14, 0, 2, 9, 17, 5, 0, 11, 10, 19, 4],
            [0, 11, 0, 12, 8, 0, 16, 0, 9, 0, 2, 0, 1, 3, 0, 19, 0, 7, 0, 17],
            [10, 20, 5, 6, 0, 13, 12, 2, 0, 1, 4, 9, 3, 0, 15, 11, 19, 0, 8, 0],
            [0, 5, 2, 0, 4, 1, 20, 0, 3, 17, 6, 0, 19, 15, 12, 14, 7, 18, 13, 16],
            [14, 9, 0, 1, 18, 0, 3, 8, 0, 15, 0, 19, 16, 0, 7, 0, 4, 6, 0, 10],
            [19, 0, 17, 13, 0, 3, 0, 12, 8, 0, 10, 0, 2, 4, 6, 16, 0, 5, 20, 0],
            [0, 6, 7, 0, 12, 19, 4, 0, 16, 8, 3, 14, 5, 2, 0, 17, 1, 0, 15, 13],
            [3, 17, 0, 19, 6, 0, 2, 4, 0, 16, 0, 15, 0, 20, 13, 0, 9, 1, 0, 8],
            [0, 13, 18, 0, 20, 15, 10, 0, 2, 6, 1, 0, 8, 0, 17, 4, 3, 0, 5, 19],
            [9, 16, 13, 4, 2, 5, 6, 3, 0, 19, 17, 1, 7, 12, 8, 0, 20, 11, 0, 18],
            [0, 10, 0, 3, 0, 11, 0, 20, 14, 0, 15, 0, 17, 0, 1, 13, 6, 0, 18, 12]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

        other_solution = game_solver.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)

    def test_solution_25x25_2025_01_28(self):  # approx 30s
        grid = Grid([
            [6, 8, 13, 22, 10, 25, 12, 21, 9, 12, 17, 21, 19, 12, 10, 4, 21, 13, 15, 21, 18, 10, 11, 6, 16],
            [7, 6, 25, 18, 10, 6, 3, 9, 4, 15, 6, 14, 4, 17, 19, 18, 16, 1, 18, 13, 5, 24, 21, 12, 20],
            [1, 21, 17, 8, 3, 17, 16, 1, 14, 24, 22, 17, 13, 6, 24, 15, 18, 24, 19, 2, 24, 20, 24, 25, 1],
            [25, 22, 19, 9, 9, 15, 9, 11, 10, 1, 9, 23, 22, 16, 24, 16, 22, 6, 5, 22, 2, 21, 12, 9, 13],
            [24, 4, 10, 10, 13, 21, 18, 5, 24, 25, 19, 10, 7, 2, 21, 21, 15, 24, 9, 6, 14, 22, 12, 3, 12],
            [15, 11, 17, 4, 7, 9, 7, 2, 22, 15, 10, 5, 15, 20, 15, 18, 7, 8, 7, 23, 7, 13, 1, 6, 7],
            [8, 6, 18, 25, 9, 1, 11, 1, 1, 23, 4, 7, 24, 18, 2, 4, 14, 4, 17, 18, 12, 10, 4, 21, 22],
            [5, 19, 8, 14, 11, 6, 5, 3, 18, 5, 16, 11, 20, 7, 5, 23, 5, 25, 11, 21, 11, 17, 15, 11, 10],
            [16, 24, 12, 19, 21, 1, 8, 7, 6, 10, 24, 2, 4, 25, 6, 3, 11, 8, 13, 14, 20, 15, 6, 22, 8],
            [23, 13, 16, 15, 11, 15, 6, 15, 7, 22, 15, 20, 9, 15, 17, 23, 1, 15, 8, 23, 3, 23, 5, 23, 25],
            [12, 2, 1, 11, 16, 3, 9, 20, 16, 9, 15, 1, 1, 13, 9, 10, 16, 19, 23, 22, 23, 14, 23, 17, 4],
            [4, 5, 6, 16, 15, 13, 10, 5, 20, 2, 13, 18, 3, 13, 21, 13, 17, 5, 23, 5, 22, 12, 19, 16, 1],
            [15, 1, 10, 7, 6, 2, 23, 13, 19, 3, 21, 22, 15, 16, 23, 14, 20, 12, 6, 17, 8, 19, 25, 18, 23],
            [10, 19, 2, 22, 25, 21, 4, 21, 6, 19, 20, 19, 1, 17, 16, 24, 12, 22, 14, 19, 19, 18, 24, 5, 17],
            [9, 5, 13, 6, 21, 8, 13, 4, 21, 19, 13, 16, 21, 1, 13, 20, 13, 18, 21, 3, 17, 21, 2, 13, 14],
            [20, 5, 18, 5, 16, 23, 2, 5, 12, 4, 9, 5, 25, 13, 14, 11, 13, 3, 22, 15, 7, 1, 7, 24, 23],
            [14, 7, 11, 15, 5, 1, 20, 19, 14, 6, 1, 8, 15, 18, 3, 3, 9, 14, 12, 3, 16, 25, 15, 15, 23],
            [18, 10, 18, 17, 22, 12, 1, 15, 23, 15, 14, 15, 11, 7, 25, 6, 7, 20, 2, 7, 13, 22, 16, 19, 18],
            [22, 10, 4, 19, 17, 18, 7, 14, 10, 13, 23, 6, 23, 12, 7, 1, 19, 2, 23, 8, 5, 9, 10, 16, 5],
            [19, 22, 13, 20, 4, 19, 15, 1, 21, 16, 12, 19, 10, 1, 18, 20, 3, 1, 6, 19, 7, 19, 9, 20, 11],
            [17, 12, 5, 1, 12, 11, 12, 25, 13, 16, 2, 3, 5, 10, 12, 9, 12, 7, 16, 19, 12, 6, 16, 4, 12],
            [1, 15, 7, 22, 2, 20, 9, 1, 11, 18, 20, 19, 12, 6, 5, 22, 10, 21, 4, 1, 23, 22, 14, 1, 6],
            [21, 18, 15, 2, 11, 10, 19, 22, 7, 17, 23, 7, 14, 9, 1, 21, 8, 15, 7, 16, 11, 3, 6, 7, 24],
            [15, 25, 23, 25, 19, 4, 22, 10, 17, 4, 3, 13, 4, 21, 25, 7, 25, 14, 18, 25, 1, 4, 24, 9, 4],
            [23, 20, 14, 15, 1, 4, 24, 2, 2, 8, 1, 11, 17, 22, 13, 2, 6, 23, 21, 10, 1, 7, 24, 23, 19]
        ])
        expected_solution = Grid([
            [6, 8, 0, 22, 0, 25, 12, 0, 9, 0, 17, 21, 19, 0, 10, 4, 0, 13, 15, 0, 18, 0, 11, 0, 16],
            [7, 0, 25, 18, 10, 0, 3, 9, 4, 15, 6, 14, 0, 17, 19, 0, 16, 1, 0, 13, 5, 24, 21, 12, 20],
            [1, 21, 0, 8, 3, 17, 16, 0, 14, 0, 22, 0, 13, 6, 0, 15, 18, 24, 19, 2, 0, 20, 0, 25, 0],
            [25, 0, 19, 9, 0, 15, 0, 11, 10, 1, 0, 23, 22, 0, 24, 16, 0, 6, 5, 0, 2, 21, 12, 0, 13],
            [24, 4, 0, 10, 13, 0, 18, 5, 0, 25, 19, 0, 7, 2, 0, 21, 15, 0, 9, 6, 14, 22, 0, 3, 12],
            [0, 11, 17, 4, 0, 9, 7, 2, 22, 0, 10, 5, 0, 20, 15, 18, 0, 8, 0, 23, 0, 13, 1, 6, 0],
            [8, 6, 0, 25, 9, 0, 11, 0, 1, 23, 0, 7, 24, 0, 2, 0, 14, 4, 17, 18, 12, 10, 0, 21, 22],
            [5, 19, 8, 14, 0, 6, 0, 3, 18, 0, 16, 0, 20, 7, 0, 23, 0, 25, 0, 21, 0, 17, 15, 11, 10],
            [16, 0, 12, 19, 21, 1, 8, 7, 0, 10, 24, 2, 4, 25, 6, 3, 11, 0, 13, 14, 20, 15, 0, 22, 0],
            [0, 13, 16, 0, 11, 0, 6, 0, 7, 22, 0, 20, 9, 0, 17, 0, 1, 15, 8, 0, 3, 23, 5, 0, 25],
            [12, 2, 0, 11, 0, 3, 0, 20, 16, 0, 15, 1, 0, 13, 9, 10, 0, 19, 0, 22, 0, 14, 23, 17, 4],
            [4, 0, 6, 16, 15, 13, 10, 0, 20, 2, 0, 18, 3, 0, 21, 0, 17, 0, 23, 5, 22, 12, 19, 0, 1],
            [0, 1, 10, 7, 6, 2, 23, 13, 19, 3, 21, 22, 15, 16, 0, 14, 20, 12, 0, 17, 8, 0, 25, 18, 0],
            [10, 0, 2, 0, 25, 0, 4, 21, 6, 0, 20, 0, 1, 0, 16, 24, 12, 22, 14, 0, 19, 18, 0, 5, 17],
            [9, 5, 0, 6, 0, 8, 0, 4, 0, 19, 13, 16, 21, 1, 0, 20, 0, 18, 0, 3, 17, 0, 2, 0, 14],
            [20, 0, 18, 5, 16, 23, 2, 0, 12, 4, 9, 0, 25, 0, 14, 11, 13, 3, 22, 15, 0, 1, 7, 24, 0],
            [14, 7, 11, 0, 5, 0, 20, 19, 0, 6, 1, 8, 0, 18, 3, 0, 9, 0, 12, 0, 16, 25, 0, 15, 23],
            [18, 10, 0, 17, 22, 12, 1, 15, 23, 0, 14, 0, 11, 0, 25, 6, 0, 20, 2, 7, 13, 0, 16, 19, 0],
            [22, 0, 4, 0, 17, 18, 0, 14, 0, 13, 0, 6, 23, 12, 7, 1, 19, 2, 0, 8, 0, 9, 10, 16, 5],
            [0, 22, 13, 20, 4, 0, 15, 1, 21, 16, 12, 0, 10, 0, 18, 0, 3, 0, 6, 0, 7, 19, 9, 0, 11],
            [17, 12, 0, 1, 0, 11, 0, 25, 13, 0, 2, 3, 5, 10, 0, 9, 0, 7, 16, 19, 0, 6, 0, 4, 0],
            [0, 15, 7, 0, 2, 20, 9, 0, 11, 18, 0, 19, 12, 0, 5, 22, 10, 21, 4, 0, 23, 0, 14, 1, 6],
            [21, 18, 15, 2, 0, 10, 19, 22, 0, 17, 23, 0, 14, 9, 1, 0, 8, 0, 7, 16, 11, 3, 6, 0, 24],
            [15, 0, 23, 0, 19, 0, 22, 10, 17, 0, 3, 13, 0, 21, 0, 7, 25, 14, 18, 0, 1, 4, 24, 9, 0],
            [0, 20, 14, 15, 1, 4, 24, 0, 2, 8, 0, 11, 17, 22, 13, 0, 6, 0, 21, 10, 0, 7, 0, 23, 19]
        ])
        game_solver = HitoriSolver(grid, self.get_solver_engine())
        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

        other_solution = game_solver.get_other_solution()
        self.assertEqual(Grid.empty(), other_solution)


if __name__ == '__main__':
    unittest.main()
